openapi: 3.0.3
info:
  title: QoD for enhanced communication
  description: |
    The Quality-On-Demand (QoD) API provides programmable interface for developers and other users (capabilities consumers) to request stable latency or throughput managed by Telco networks without the necessity to have an in-depth knowledge of the 4G/5G system or the overall complexity of the Telecom Systems.

    # Introduction

    Industrial (IoT), VR/Gaming, live video streaming, autonomous driving and many other scenarios demand network communication quality and are sensitive to any change in transmission conditions. Being able to request a stable latency (reduced jitter) or prioritized throughput from the network can improve user experience substantially.

    The QoD API offers the application developers the capability to request for stable latency (reduced jitter) or throughput for some specified application data flows between application clients (within a user device) and Application Servers (backend services). The developer has a pre-defined set of Quality of Service (QoS) profiles which they could choose from depending on their latency or throughput requirements.

    ![QoD API Overview](https://raw.githubusercontent.com/camaraproject/QualityOnDemand/main/documentation/API_documentation/resources/QoD_latency_overview.PNG)

    # Relevant terms and defintions

    * **QOD service endpoint**:
    The URL pointing to the RESTful resource of the QoD API.

    * **Authentication**:
    Security access keys such as OAuth 2.0 client credentials used by client applications to invoke the QoD API.

    * **QoS profiles and QoS profile labels**:
    Latency or throughput requirements of the application mapped to relevant QoS profile class.

    * **Identifier for the device**:
    At least one identifier for the device (user equipment) out of four options: IPv4 address, IPv6 address, Phone number, or Network Access Identifier [[5]](#5) assigned by the mobile network operator for the device.

    * **Identifier for the application server**:
    IPv4 and/or IPv6 address of the application server (application backend)

    * **App-Flow (between the application client and application server)**: 
    The precise application data flow the developer wants to prioritize and have stable latency or throughput for. This flow is in the current API version determined by the identifiers used for the device and the application server. And it can be further elaborated with details such as ports or port-ranges. Future version of the API might allow more detailed flow identification features.

    * **Duration**: 
    Duration (in seconds) for which the QoS session (between application client and application server) should be created. This parameter is optional. When not specified, a default session duration (e.g. 24 hours) is applied. The user may request a termination before its expiration.

    * **Notification URL and token**:
    Developers may provide a callback URL on which notifications (eg. session termination) regarding the session can be received from the service provider. This is an optional parameter.

    # API functionality

    The usage of the QoD API is based on QoS profile classes and parameters which define App-Flows.
    Based on the API, QoS session resources can be created, queried, and deleted. Once an offered QoS profile class is requested, application users get a prioritized service with stable latency or throughput even in the case of congestion. The QoD API has the following characteristics:

    * A specified App-Flow is prioritized to ensure stable latency or throughput for that flow.
    * The prioritized App-Flow is described by providing information such as device IP address (or other device identifier) & application server IP addresses and port/port-ranges.
    * The developer can optionally specify the duration for which they need the prioritized App-flow.
    * Stable latency or throughput is requested by selecting from the list of QoS profiles made available by the service provider (e.g. QOS_E) to map latency and throughput requirements.
    * The developer can optionally also specify callback URL on which notifications for the session can be sent. <br>

    Following diagram shows the interaction between different components

    ![QoD Management API](https://raw.githubusercontent.com/camaraproject/QualityOnDemand/main/documentation/API_documentation/resources/QoD_details.PNG)

    How QoS profiles are mapped to connectivity characteristics are subject to agreements between the communication service provider and the API invoker. Within the CAMARA project, you can find a sample for such a mapping of QoS profiles. [CAMARA QoS Profiles Mapping Table (REFERENCE DRAFT)](https://github.com/camaraproject/QualityOnDemand/blob/main/documentation/API_documentation/QoSProfile_Mapping_Table.md) 

    # Further info and support

    (FAQs will be added in a later version of the documentation)
  termsOfService: http://swagger.io/terms/
  contact:
    email: project-email@sample.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.9.0-wip
externalDocs:
  description: Product documentation at Camara
  url: https://github.com/camaraproject/
security:
  - oAuth2ClientCredentials: []
servers:
  - url: "{apiRoot}/{basePath}"
    variables:
      apiRoot:
        default: http://localhost:9091
        description: API root
      basePath:
        default: qod/v0
        description: Base path for the QoD API
paths:
  /sessions:
    post:
      tags:
        - QoS sessions
      summary: Creates a new session
      description: Create QoS Session to manage latency/throughput priorities
      operationId: createSession
      requestBody:
        description: Parameters to create a new session
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateSession"
        required: true
      callbacks:
        notifications:
          "{$request.body#/notificationUrl}/notifications":
            $ref: "#/paths/~1notifications"
      responses:
        "201":
          description: Session created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "400":
          description: Invalid input for createSession operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              examples:
                Generic400:
                  summary: Some parameter combinations or parameter values provided are not schema compliant
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Schema validation failed at  ..."
                DeviceMissing:
                  summary: Device must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: device"
                InsufficientDeviceProperties:
                  summary: Device must be identified by at least one parameter
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Insufficient properties specified: device"
                InconsistentDeviceProperties:
                  summary: Device parameters provided identify different devices
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Multiple inconsistent parameters specified: device"
                CannotIdentifyDevice:
                  summary: No device can be identified from provided parameters
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Unable to identify device from specified parameters: device"
                InvalidDevicePublicPortValue:
                  summary: Invalid port specified for device public port
                  value:
                    status: 400
                    code: OUT_OF_RANGE
                    message: "Invalid port value specified: device.ipv4Address.publicPort"
                ApplicationServerMissing:
                  summary: Application server must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: applicationServer"
                QoSProfileMissing:
                  summary: Required QoS profile must be specified
                  value:
                    status: 400
                    code: INVALID_ARGUMENT
                    message: "Expected property is missing: qosProfile"
                InvalidDevicePortsRanges:
                  summary: Invalid port ranges specified for devicePorts 
                  value:
                    status: 400
                    code: OUT_OF_RANGE
                    message: "Invalid port ranges specified: devicePorts"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorInfo"
              example:
                status: 409
                code: CONFLICT
                message: "Another session is created for the same device"
        "500":
          $ref: "#/components/responses/Generic500"
        "501":
          $ref: "#/components/responses/Generic501"
        "503":
          $ref: "#/components/responses/Generic503"
  /sessions/{sessionId}:
    get:
      tags:
        - QoS sessions
      summary: Get QoS session information
      description: Querying for QoS session resource information details
      operationId: getSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "200":
          description: Contains information about active session
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionInfo"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
    delete:
      tags:
        - QoS sessions
      summary: Delete a QoS session
      description: Free resources related to QoS session
      operationId: deleteSession
      parameters:
        - name: sessionId
          in: path
          description: Session ID that was obtained from the createSession operation
          required: true
          schema:
            $ref: "#/components/schemas/SessionId"
      responses:
        "204":
          description: Session deleted
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "404":
          $ref: "#/components/responses/SessionNotFound404"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
  /notifications:
    post:
      tags:
        - Session notifications callback
      summary: "Session notifications callback"
      description: |
        Important: this endpoint is to be implemented by the API consumer.
        The QoD server will call this endpoint whenever any network related event occurs.
        Currently only `QOS_STATUS_CHANGED` event is defined.
      operationId: postNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Notification"
      responses:
        "204":
          description: Successful notification
        "400":
          $ref: "#/components/responses/Generic400"
        "401":
          $ref: "#/components/responses/Generic401"
        "403":
          $ref: "#/components/responses/Generic403"
        "500":
          $ref: "#/components/responses/Generic500"
        "503":
          $ref: "#/components/responses/Generic503"
      security:
        - apiKey: []
components:
  securitySchemes:
    oAuth2ClientCredentials:
      type: oauth2
      description: This API uses OAuth 2 with the client credentials grant flow.
      flows:
        clientCredentials:
          tokenUrl: "{tokenUrl}"
          scopes: {}

    apiKey:
      type: apiKey
      description: API key to authorize requests
      name: apikey
      in: query

  schemas:
    SessionId:
      description: Session ID in UUID format
      type: string
      format: uuid

    SessionInfo:
      description: Session related information.
      allOf:
        - $ref: "#/components/schemas/CreateSession"
        - type: object
          properties:
            sessionId:
              $ref: "#/components/schemas/SessionId"
            startedAt:
              type: integer
              example: 1639479600
              description: Timestamp of session start in seconds since Unix epoch
              format: int64
            expiresAt:
              type: integer
              example: 1639566000
              description: Timestamp of session expiration if the session was not deleted, in seconds since Unix epoch
              format: int64
            qosStatus:
              $ref: "#/components/schemas/QosStatus"
            messages:
              type: array
              items:
                $ref: "#/components/schemas/Message"
          required:
            - sessionId
            - duration
            - startedAt
            - expiresAt
            - qosStatus

    CreateSession:
      description: Attributes required to create a session
      type: object
      properties:
        duration:
          description: |
            Session duration in seconds. Maximal value of 24 hours is used if not set.
            After session is expired the, client will receive a `QOS_STATUS_CHANGED` event with 
             - `qosStatus` as `UNAVAILABLE`, and, 
             - `statusInfo` as `DURATION_EXPIRED`. 
            See notification callback.
          type: integer
          format: int32
          minimum: 1
          maximum: 86400
          default: 86400
          example: 86400
        device:
          $ref: "#/components/schemas/Device"
        applicationServer:
          $ref: "#/components/schemas/ApplicationServer"
        devicePorts:
          $ref: "#/components/schemas/PortsSpec"
          description: The ports used locally by the device for flows to which the requested QoS profile should apply. If omitted, then the qosProfile will apply to all flows between the device and the specified application server address and ports.
        applicationServerPorts:
          $ref: "#/components/schemas/PortsSpec"
        qosProfile:
          $ref: "#/components/schemas/QosProfile"
        notificationUrl:
          description: Allows asynchronous delivery of session related events
          type: string
          format: uri
          example: "https://application-server.com"
        notificationAuthToken:
          description: Authentication token for callback API
          type: string
          example: "c8974e592c2fa383d4a3960714"
      required:
        - device
        - applicationServer
        - qosProfile

    Port:
      description:  TCP or UDP port number
      type: integer
      minimum: 0
      maximum: 65535

    PortsSpec:
      description: |
        Ports may be specified as a list of ranges or single ports.
      type: object
      minProperties: 1
      properties:
        ranges:
          type: array
          minItems: 1
          items:
            type: object
            required:
              - from
              - to
            properties:
              from:
                $ref: "#/components/schemas/Port"
              to:
                $ref: "#/components/schemas/Port"
        ports:
          type: array
          minItems: 1
          items:
            $ref: "#/components/schemas/Port"
      example:
        ranges:
          - from: 5010
            to: 5020
        ports:
          - 5060
          - 5070

    QosProfile:
      description: |
        * `QOS_E` - Qualifier for enhanced communication profile
        * `QOS_S` - Qualifier for the requested QoS profile _S_
        * `QOS_M` - Qualifier for the requested QoS profile _M_
        * `QOS_L` - Qualifier for the requested QoS profile _L_
      type: string
      enum:
        - QOS_E
        - QOS_S
        - QOS_M
        - QOS_L

    Notification:
      type: object
      properties:
        sessionId:
          $ref: "#/components/schemas/SessionId"
        eventReports:
          description: Contains the reported event and applicable information
          type: array
          items:
            $ref: "#/components/schemas/EventReport"
          minItems: 1
      required:
        - sessionId
        - eventReports
    
    EventReport:
      oneOf:
        - $ref: '#/components/schemas/QosStatusChangedEventReport'
      discriminator:
        propertyName: eventType
        mapping:
          QOS_STATUS_CHANGED: "#/components/schemas/QosStatusChangedEventReport"
        
    QosStatusChangedEventReport:
      type: object
      properties:
        eventType:
          $ref: "#/components/schemas/SessionEventType"
        qosStatus:
          $ref: "#/components/schemas/QosStatus"
        statusInfo:
          $ref: "#/components/schemas/StatusInfo"
      required:
        - eventType
        - qosStatus
          
    StatusInfo:
          description: |
            Reason for the new `qosStatus`. Currently `statusInfo` is only applicable when `qosStatus` is 'UNAVAILABLE'.
            * `DURATION_EXPIRED` - Session terminated due to requested duration expired
            * `NETWORK_TERMINATED` - Network terminated the session before the requested duration expired
          type: string
          enum:
            - DURATION_EXPIRED
            - NETWORK_TERMINATED¡

    SessionEventType:
      type: string
      enum:
        - QOS_STATUS_CHANGED
    
    Device:
      description: |
        End-user equipment able to connect to a mobile network. Examples of devices include smartphones or IoT sensors/actuators. 

        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address`
        * `phoneNumber`
        * `networkAccessIdentifier`  

        NOTE: the MNO might support only a subset of these options. The API invoker can provide multiple identifiers to be compatible across different MNOs. In this case the identifiers MUST belong to the same device     
      type: object
      properties:
        phoneNumber:
          $ref: "#/components/schemas/PhoneNumber"
        networkAccessIdentifier:
          $ref: "#/components/schemas/NetworkAccessIdentifier"
        ipv4Address:
          $ref: "#/components/schemas/DeviceIpv4Addr"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      minProperties: 1

    ApplicationServer:
      description: |
        A server hosting backend applications to deliver some business logic to clients.
        
        The developer can choose to provide the below specified device identifiers:

        * `ipv4Address`
        * `ipv6Address` 
      type: object
      properties:
        ipv4Address:
          $ref: "#/components/schemas/Ipv4Address"
        ipv6Address:
          $ref: "#/components/schemas/Ipv6Address"
      minProperties: 1

    NetworkAccessIdentifier:
      description: A public identifier addressing a subscription in a mobile network. In 3GPP terminology, it corresponds to the GPSI formatted with the External Identifier ({Local Identifier}@{Domain Identifier}). Unlike the telephone number, the network access identifier is not subjected to portability ruling in force, and is individually managed by each operator.
      type: string
      example: "123456789@domain.com"

    PhoneNumber:
      description: A public identifier addressing a telephone subscription. In mobile networks it corresponds to the MSISDN (Mobile Station International Subscriber Directory Number). In order to be globally unique it has to be formatted in international format, according to E.164 standard, optionally prefixed with '+'.
      type: string
      pattern: '^\+?[0-9]{5,15}$'
      example: "123456789"

    Ipv4Address:
      type: string
      format: ipv4
      pattern: '^([01]?\d\d?|2[0-4]\d|25[0-5])(?:\.(?:[01]?\d\d?|2[0-4]\d|25[0-5])){3}(\/([0-9]|[1-2][0-9]|3[0-2]))?$'
      example: "192.168.0.1/24"
      description: |
        IPv4 address may be specified in form <address/mask> as:
          - address - an IPv4 number in dotted-quad form 1.2.3.4. Only this exact IP number will match the flow control rule.
          - address/mask - an IP number as above with a mask width of the form 1.2.3.4/24.
            In this case, all IP numbers from 1.2.3.0 to 1.2.3.255 will match. The bit width MUST be valid for the IP version.

    Ipv6Address:
      type: string
      format: ipv6
      allOf:
        - pattern: '^((:|(0?|([1-9a-f][0-9a-f]{0,3}))):)((0?|([1-9a-f][0-9a-f]{0,3})):){0,6}(:|(0?|([1-9a-f][0-9a-f]{0,3})))(\/(([0-9])|([0-9]{2})|(1[0-1][0-9])|(12[0-8])))?$'
        - pattern: '^((([^:]+:){7}([^:]+))|((([^:]+:)*[^:]+)?::(([^:]+:)*[^:]+)?))(\/.+)?$'
      example: "2001:db8:85a3:8d3:1319:8a2e:370:7344"
      description: |
        IPv6 address, following IETF 5952 format, may be specified in form <address/mask> as:
          - address - The /128 subnet is optional for single addresses:
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344
            - 2001:db8:85a3:8d3:1319:8a2e:370:7344/128
          - address/mask - an IP v6 number with a mask:
            - 2001:db8:85a3:8d3::0/64
            - 2001:db8:85a3:8d3::/64

    Message:
      type: object
      properties:
        severity:
          type: string
          enum: ["INFO", "WARNING"]
          description: Message severity
        description:
          type: string
          description: Detailed message text
      required:
        - severity
        - description

    QosStatus:
      type: string
      enum:
        - REQUESTED
        - AVAILABLE
        - UNAVAILABLE
      description: |
        * `REQUESTED` - QoS has been requested by creating a session
        * `AVAILABLE` - The requested QoS has been provided by the network
        * `UNAVAILABLE` - The requested QoS cannot be provided by the network due to some reason

    ErrorInfo:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          description: HTTP status code returned along with this error response
        code:
          type: string
          description: Code given to this error
        message:
          type: string
          description: Detailed error description

  responses:
    Generic400:
      description: Invalid input
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 400
            code: INVALID_ARGUMENT
            message: "Schema validation failed at  ..."

    Generic401:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 401
            code: UNAUTHENTICATED
            message: "Authorization failed: ..."

    Generic403:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 403
            code: PERMISSION_DENIED
            message: "Operation not allowed: ..."

    SessionNotFound404:
      description: Session not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 404
            code: NOT_FOUND
            message: "Session Id does not exist"

    Generic500:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 500
            code: INTERNAL
            message: "Internal server error: ..."

    Generic501:
      description: Not Implemented
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 501
            code: NOT_IMPLEMENTED
            message: "Service not implemented for the specified user device"

    Generic503:
      description: Service unavailable
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorInfo"
          example:
            status: 503
            code: UNAVAILABLE
            message: "Service unavailable"
